interval <- c(
mu1 -mu2 - qt(1 - alpha/2, n1 + n2 -2) *sqrt(s*(1/n1 + 1 /n2)),
mu1 -mu2 + qt(1 - alpha/2, n1 + n2 -2) *sqrt(s*(1/n1 + 1 /n2))
)
interval
mu1
mu2
mu1 - mu2
str(dat)
t.test(dat$Response_Time[which(dat$Time==1 & dat$Group=="Control")],
dat$Response_Time[which(dat$Time==2 & dat$Group=="Control")],
paired = TRUE,
var.equal = FALSE)
sd <- dat$Response_Time
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=sd/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y))
s <- sd(dat$Response_Time)
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=s/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y))
s <- sd(dat$Response_Time)
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=s/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = 2000, color="red", linetype="dashed")
s <- sd(dat$Response_Time)
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=s/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = 2000, color="red", linetype="dashed")
alpha <- 0.05
quantiles <- qnorm(c(alpha/2, 1-alplha/2), mean=2000, sd=s/sqrt(n))
s <- sd(dat$Response_Time)
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=s/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = 2000, color="red", linetype="dashed")
alpha <- 0.05
quantiles <- qnorm(c(alpha/2, 1-alpha/2), mean=2000, sd=s/sqrt(n))
quantiles
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = quantiles[1], color="blue", linetype="dashed")+
geom_vline(xintercept = quantiles[2], color="blue", linetype="dashed")
s <- sd(dat$Response_Time)
x <- seq(1900, 2150, 1)
n <- nrow(dat)
y <- dnorm(x, mean=2000, sd=s/sqrt(n))
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = 2000, color="red", linetype="dashed")
alpha <- 0.05
quantiles <- qnorm(c(alpha/2, 1-alpha/2), mean=2000, sd=s/sqrt(n))
quantiles
ggplot() +
geom_line(mapping = aes(x=x, y=y)) +
geom_vline(xintercept = mu_R, color="red", linetype="dashed")+
geom_vline(xintercept = quantiles[1], color="blue", linetype="dashed")+
geom_vline(xintercept = quantiles[2], color="blue", linetype="dashed")
2*pnorm(mu_R, mean = 2000, sd=s/sqrt(n), lower.tail = FALSE)
2*pnorm(mu_R, mean = 2000, sd=s/sqrt(n), lower.tail = FALSE)
2*(1 - pnorm(mu_R, mean = 2000, sd=s/sqrt(n)))
t.test(dat$Response_Time, mu=2000)
library(palmerpenguins)
data(penguins)
library(palmerpenguins)
data(penguins)
str(penguis)
library(palmerpenguins)
data(penguin)
str(penguin)
library(palmerpenguins)
data(penguins)
str(penguins)
id_a <- which(penguins$species=="Adelie")
mu_a <- mean(penguins$bill_length_mm[id_a])
sd_a <- sd(penguins$bill_length_mm[id_a])
id_c <- which(penguins$species=="Chinstrap")
mu_c <- mean(penguins$bill_length_mm[id_c])
sd_c <- sd(penguins$bill_length_mm[id_c])
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_c, " (", sd_c, ")"))
id_a <- which(penguins$species=="Adelie")
id_a
mu_a <- mean(penguins$bill_length_mm[id_a])
sd_a <- sd(penguins$bill_length_mm[id_a])
id_c <- which(penguins$species=="Chinstrap")
mu_c <- mean(penguins$bill_length_mm[id_c])
sd_c <- sd(penguins$bill_length_mm[id_c])
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_c, " (", sd_c, ")"))
id_a <- which(penguins$species=="Adelie")
mu_a <- mean(penguins$bill_length_mm[id_a], na.rm = TRUE)
sd_a <- sd(penguins$bill_length_mm[id_a], na.rm = TRUE)
id_c <- which(penguins$species=="Chinstrap")
mu_c <- mean(penguins$bill_length_mm[id_c], na.rm = TRUE)
sd_c <- sd(penguins$bill_length_mm[id_c], na.rm = TRUE)
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_c, " (", sd_c, ")"))
knitr::opts_chunk$set(echo = TRUE)
n_a <- length(adelie)
adelie <- penguins$bill_length_mm[id_a]
chinstrap <- penguins$bill_length_mm[id_c]
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histograms()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histograms()
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram()
gridExtra::grid.arrange(p1)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 20)
gridExtra::grid.arrange(p1)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 25)
p2 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(y=bill_length_mm))+
geom_boxplot()
gridExtra::grid.arrange(p1, p2)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 25)
p2 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(y=bill_length_mm))+
geom_boxplot()
gridExtra::grid.arrange(p1, p2, nrow=1)
id_a <- which(penguins$species=="Adelie" & !is.na(penguins$bill_length_mm))
mu_a <- mean(penguins$bill_length_mm[id_a], na.rm = TRUE)
sd_a <- sd(penguins$bill_length_mm[id_a], na.rm = TRUE)
id_c <- which(penguins$species=="Chinstrap"& !is.na(penguins$bill_length_mm))
mu_c <- mean(penguins$bill_length_mm[id_c], na.rm = TRUE)
sd_c <- sd(penguins$bill_length_mm[id_c], na.rm = TRUE)
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_c, " (", sd_c, ")"))
View(penguins)
id_a <- which(penguins$species=="Adelie" & !is.na(penguins$bill_length_mm))
mu_a <- mean(penguins$bill_length_mm[id_a], na.rm = TRUE)
sd_a <- sd(penguins$bill_length_mm[id_a], na.rm = TRUE)
id_c <- which(penguins$species=="Gentoo"& !is.na(penguins$bill_length_mm))
mu_c <- mean(penguins$bill_length_mm[id_c], na.rm = TRUE)
sd_c <- sd(penguins$bill_length_mm[id_c], na.rm = TRUE)
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_c, " (", sd_c, ")"))
library(palmerpenguins)
data(penguins)
str(penguins)
id_a <- which(penguins$species=="Adelie" & !is.na(penguins$bill_length_mm))
mu_a <- mean(penguins$bill_length_mm[id_a], na.rm = TRUE)
sd_a <- sd(penguins$bill_length_mm[id_a], na.rm = TRUE)
id_g <- which(penguins$species=="Gentoo"& !is.na(penguins$bill_length_mm))
mu_g <- mean(penguins$bill_length_mm[id_g], na.rm = TRUE)
sd_g <- sd(penguins$bill_length_mm[id_g], na.rm = TRUE)
print(paste0("Adelie: ",mu_a, " (", sd_a, ")"))
print(paste0("Chinstrap: ", mu_g, " (", sd_g, ")"))
adelie <- penguins$bill_length_mm[id_a]
gentoo <- penguins$bill_length_mm[id_g]
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 25)
p2 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(y=bill_length_mm))+
geom_boxplot()
gridExtra::grid.arrange(p1, p2, nrow=1)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 25)
p2 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(y=bill_length_mm))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
n_a <- length(adelie)
p1 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(x=bill_length_mm))+
geom_histogram(bins = 40)
p2 <- ggplot(penguins %>%
filter(species=="Adelie"), aes(y=bill_length_mm))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
which(is.na(adelie))
n_a <- length(adelie)
p1 <- ggplot(mapping= aes(x=adelie))+
geom_histogram(bins = 40)
p2 <- ggplot(mapping= aes(x=adelie))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
n_a <- length(adelie)
p1 <- ggplot(mapping= aes(x=adelie))+
geom_histogram(bins = 40)
p2 <- ggplot(mapping= aes(y=adelie))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
n_a <- length(adelie)
p1 <- ggplot(mapping= aes(x=adelie))+
geom_histogram(bins = 40) +
geom_vline(xintercept = mu_a, color="red", linetype="dashed")
p2 <- ggplot(mapping= aes(y=adelie))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
qqnorm(adelie)
qqnorm(adelie)
qqline(adelie, col="red")
ggplot(mapping = aes(x=adelie)) +
geom_qq()+
geom_qq_line(color="red")
ggplot() +
geom_qq(mapping = aes(sample=adelie))+
geom_qq_line(color="red")
ggplot(mapping = aes(x=adelie)) +
geom_qq(mapping = aes(sample=adelie))+
geom_qq_line(color="red")
ggplot(mapping = aes(sample=adelie)) +
geom_qq()+
geom_qq_line(color="red")
qqnorm(adelie, conf.level=0.95)
qqline(adelie, col="red")
qqplot(adelie, conf.level=0.95)
qqplot(y=adelie, conf.level=0.95)
qqnorm(adelie, plot.it = TRUE)
qqline(adelie, col="red")
ggplot(mapping = aes(sample=adelie)) +
geom_qq()+
geom_qq_line(color="red")
shapiro.test(adelie)
p1 <- ggplot(mapping= aes(x=gentoo))+
geom_histogram(bins = 40) +
geom_vline(xintercept = mu_a, color="red", linetype="dashed")
p2 <- ggplot(mapping= aes(y=gentoo))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
p1 <- ggplot(mapping= aes(x=gentoo))+
geom_histogram(bins = 40) +
geom_vline(xintercept = mu_g, color="red", linetype="dashed")
p2 <- ggplot(mapping= aes(y=gentoo))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
qqnorm(gentoo, plot.it = TRUE)
qqline(gentoo, col="red")
ggplot(mapping = aes(sample=gentoo)) +
geom_qq()+
geom_qq_line(color="red")
ggplot(mapping = aes(sample=gentoo)) +
geom_qq()+
geom_qq_line(color="red")
shapiro.test(gentoo)
max(gentoo)
which.max(gentooÃ¹)
which.max(gentoo)
gentoo <- gentoo[-34]
p1 <- ggplot(mapping= aes(x=gentoo))+
geom_histogram(bins = 40) +
geom_vline(xintercept = mu_g, color="red", linetype="dashed")
p2 <- ggplot(mapping= aes(y=gentoo))+
geom_boxplot(outliers = TRUE)
gridExtra::grid.arrange(p1, p2, nrow=1)
qqnorm(gentoo, plot.it = TRUE)
qqline(gentoo, col="red")
ggplot(mapping = aes(sample=gentoo)) +
geom_qq()+
geom_qq_line(color="red")
shapiro.test(gentoo)
adelie <- penguins$bill_length_mm[id_a]
gentoo <- penguins$bill_length_mm[id_g]
gentoo0 <- gentoo[-which.max(gentoo)]
ggplot(mapping = aes(sample=gentoo0)) +
geom_qq()+
geom_qq_line(color="red")
shapiro.test(gentoo0)
t.test(adelie, gentoo, var.equal = TRUE, paired = FALSE)
t.test(adelie, gentoo, var.equal = TRUE, paired = FALSE)
t.test(adelie, gentoo0, var.equal = TRUE, paired = FALSE)
coin::independence_test(c(adelie,gentoo) ~ rep(c(1,0),each=c(151,123)))
dat <- data.frame(bill_length = c(adelie,gentoo), species =rep(c(1,0),each=c(151,123)))
dat <- data.frame(bill_length = c(adelie,gentoo), species =rep(c(1,0),times=c(151,123)))
coin::independence_test(bill_length ~ species, dat)
wilcox.test(adelie, gentoo)
library(WRS2)
install.packages("WRS2")
library(WRS2)
yuen(adelie ~ gentoo, tr = 0.2) # tr = trimming percentage
library(WRS2)
yuen(adelie ~ gentoo, tr = 0.2) # tr = trimming percentage
?yuen
library(WRS2)
dat <- data.frame(bill_length = c(adelie,gentoo), species =rep(c(1,0),times=c(151,123)))
yuen(bill_length ~ species,data =  dat, tr = 0.2) # tr = trimming percentage
library(robustbase)
hubers1 <- hubers(adelie)
library(robustbase)
hubers1 <- huberM(adelie)
hubers2 <- huberM(gentoo)
diff_means <- hubers1$mu - hubers2$mu
diff_means
hubers1
library(WRS2)
dat <- data.frame(bill_length = c(adelie,gentoo), species =rep(c(1,0),times=c(151,123)))
yuen(bill_length ~ species,data =  dat, tr = 0.2) # tr = trimming percentage
coin::independence_test(bill_length ~ species, dat)
library(boot)
boot_t <- function(data, indices) {
d <- data[indices, ]
return(mean(d$group1) - mean(d$group2))
}
results <- boot(data, boot_t, R = 1000)
load("hotdog.Rdata")
load("Statistical Inference/hotdog.Rdata")
colnames(hot_dog) <- c("meat", "calories")
summary(hot_dog)
attach(hot_dog)
group_sizes <- by(calories, meat, length)
n <- sum(group_sizes)
sigma2 <- function(x){
v <- mean((x - mean(x))^2)
return(v)
}
means <- by(calories, meat, mean)
variances <- by(calories, meat, sigma2)
print(cbind(means, variances))
mu <- mean(calories)
v <- sigma2(calories)
print(c(mu, v))
k <- length(levels(meat))
k
detach(hot_dog)
boxplot(calories ~ meat, hot_dog)
ggplot(hot_dog, aes(x=meat,y=calories,fill=meat))+
geom_boxplot()
sse <- sum(group_sizes * variances)
ssg <- sum(group_sizes * (means - mu)^2)
print(c(ssg, sse))
print(c(sse/n + ssg/n, v))
kruskal.test(calories~meat, hot_dog)
data <- data.frame(
rent = c(950, 1600, 1200, 1500, 950, 1700, 1650, 935, 875, 1150, 1400, 1650,
2300, 1800, 1400, 1450, 1100, 1700, 1200, 1150, 1600, 1650, 1200,
800, 1750),
size = c(850, 1450, 1085, 1232, 718, 1485, 1136, 726, 700, 956, 1100, 1285,
1985, 1369, 1175, 1225, 1245, 1259, 1150, 896, 1361, 1040, 755, 1000,
1200)
)
# Scatterplot
plot(data$size, data$rent, main = "Scatterplot of Rent vs. Size",
xlab = "Size (sq ft)", ylab = "Rent ($)")
data <- data.frame(
rent = c(950, 1600, 1200, 1500, 950, 1700, 1650, 935, 875, 1150, 1400, 1650,
2300, 1800, 1400, 1450, 1100, 1700, 1200, 1150, 1600, 1650, 1200,
800, 1750),
size = c(850, 1450, 1085, 1232, 718, 1485, 1136, 726, 700, 956, 1100, 1285,
1985, 1369, 1175, 1225, 1245, 1259, 1150, 896, 1361, 1040, 755, 1000,
1200)
)
# Scatterplot
plot(data$size, data$rent, main = "Scatterplot of Rent vs. Size",
xlab = "Size (sq ft)", ylab = "Rent ($)")
ggplot(data, aes(x=size, y=rent)) +
geom_point() +
xlab("Size (sq ft)") +
ylab("Rent ($)") +
theme_minimal(title="Scatterplot of Rent vs. Size")
data <- data.frame(
rent = c(950, 1600, 1200, 1500, 950, 1700, 1650, 935, 875, 1150, 1400, 1650,
2300, 1800, 1400, 1450, 1100, 1700, 1200, 1150, 1600, 1650, 1200,
800, 1750),
size = c(850, 1450, 1085, 1232, 718, 1485, 1136, 726, 700, 956, 1100, 1285,
1985, 1369, 1175, 1225, 1245, 1259, 1150, 896, 1361, 1040, 755, 1000,
1200)
)
# Scatterplot
plot(data$size, data$rent, main = "Scatterplot of Rent vs. Size",
xlab = "Size (sq ft)", ylab = "Rent ($)")
ggplot(data, aes(x=size, y=rent)) +
geom_point() +
xlab("Size (sq ft)") +
ylab("Rent ($)") +
title("Scatterplot of Rent vs. Size")
data <- data.frame(
rent = c(950, 1600, 1200, 1500, 950, 1700, 1650, 935, 875, 1150, 1400, 1650,
2300, 1800, 1400, 1450, 1100, 1700, 1200, 1150, 1600, 1650, 1200,
800, 1750),
size = c(850, 1450, 1085, 1232, 718, 1485, 1136, 726, 700, 956, 1100, 1285,
1985, 1369, 1175, 1225, 1245, 1259, 1150, 896, 1361, 1040, 755, 1000,
1200)
)
# Scatterplot
plot(data$size, data$rent, main = "Scatterplot of Rent vs. Size",
xlab = "Size (sq ft)", ylab = "Rent ($)")
ggplot(data, aes(x=size, y=rent)) +
geom_point() +
xlab("Size (sq ft)") +
ylab("Rent ($)") +
title("Scatterplot of Rent vs. Size") +
theme_minimal()
plot(data$size, data$rent, main = "Scatterplot with Regression Line",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, col = "red")
model <- lm(rent ~ size, data = data)
summary(model)
plot(data$size, data$rent, main = "Scatterplot with Regression Line",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, col = "red")
ggplot(data, aes(x=size, y=rent))+
geom_point() +
theme_minimal() +
geom_abline(model)
ggplot(data, aes(x=size, y=rent))+
geom_point() +
theme_minimal() +
geom_abline(mapping=aes(model))
model$coefficients
ggplot(data, aes(x=size, y=rent))+
geom_point() +
theme_minimal() +
geom_abline(intercept = model$coefficients[1],
slope = model$coefficients[2])
ggplot(data, aes(x=size, y=rent))+
geom_point() +
theme_minimal() +
geom_abline(intercept = model$coefficients[1],
slope = model$coefficients[2], color="red",
linetype="dashed")
plot(model$fitted.values, model$residuals, main = "Residuals vs Fitted",
xlab = "Fitted Values", ylab = "Residuals")
abline(h = 0, col = "red")
ggplot(data, aes(x=size, y=rent))+
geom_point() +
theme_minimal() +
geom_abline(intercept = model$coefficients[1],
slope = model$coefficients[2], color="red",
linetype="dashed")
# Confidence intervals
conf_int <- predict(model, interval = "confidence")
# Prediction intervals
pred_int <- predict(model, interval = "prediction", newdata = data.frame(size=seq(250, 2200, 10)))
# Visualizing intervals
plot(data$size, data$rent, main = "Confidence and Prediction Intervals",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, lty = 2)
lines(data$size, conf_int[, 2], col = "blue", lty = 2)
lines(data$size, conf_int[, 3], col = "blue", lty = 2)
lines(data$size, pred_int[, 2], col = "red", lty = 3)
# Confidence intervals
conf_int <- predict(model, interval = "confidence")
# Prediction intervals
pred_int <- predict(model, interval = "prediction", newdata = data.frame(size=seq(250, 2200, 10)))
# Visualizing intervals
plot(data$size, data$rent, main = "Confidence and Prediction Intervals",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, lty = 2)
lines(data$size, conf_int[, 2], col = "blue", lty = 2)
lines(data$size, conf_int[, 3], col = "blue", lty = 2)
lines(seq(250, 2200, 10), pred_int[, 2], col = "red", lty = 3)
lines(seq(250, 2200, 10), pred_int[, 3], col = "red", lty = 3)
newdat <- data.frame(size=seq(250, 2200, 10))
# Confidence intervals
conf_int <- predict(model, interval = "confidence", newdata = newdat)
# Prediction intervals
pred_int <- predict(model, interval = "prediction", newdata = newdat)
# Visualizing intervals
plot(data$size, data$rent, main = "Confidence and Prediction Intervals",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, lty = 2)
lines(newdat, conf_int[, 2], col = "blue", lty = 2)
newdat <- data.frame(size=seq(250, 2200, 10))
# Confidence intervals
conf_int <- predict(model, interval = "confidence", newdata = newdat)
# Prediction intervals
pred_int <- predict(model, interval = "prediction", newdata = newdat)
# Visualizing intervals
plot(data$size, data$rent, main = "Confidence and Prediction Intervals",
xlab = "Size (sq ft)", ylab = "Rent ($)")
abline(model, lty = 2)
lines(newdat$size, conf_int[, 2], col = "blue", lty = 2)
lines(newdat$size, conf_int[, 3], col = "blue", lty = 2)
lines(newdat$size, pred_int[, 2], col = "red", lty = 3)
lines(newdat$size, pred_int[, 3], col = "red", lty = 3)
library(reshape2)
?reshape2::melt
install.packages("glmnet")
knitr::opts_chunk$set(echo = TRUE)
coeff_ls <- coef(mod1)
